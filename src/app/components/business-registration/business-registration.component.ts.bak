import { Component, HostListener, ViewEncapsulation, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { FormControl } from '@angular/forms';

interface BusinessType {
  id: string;
  name: string;
  description: string;
  selected: boolean;
}

interface CompanyResult {
  id: string;
  name: string;
  regNumber: string;
  address: string;
}

@Component({
  selector: 'app-business-registration',
  templateUrl: './business-registration.component.html',
  styleUrls: ['./business-registration.component.scss'],
  encapsulation: ViewEncapsulation.None
})
export class BusinessRegistrationComponent implements OnInit {
  // Current step in the registration process
  currentStep: string = 'business-type';
  businessTypeSubStep: string = 'business-type';
  
  // Mobile view flag
  isMobileView: boolean = false;
  
  // Progress steps
  progressSteps = [
    { id: 'business-type', label: 'Business Type', completed: false },
    { id: 'merchant-details', label: 'Merchant Details', completed: false },
    { id: 'business-address', label: 'Business Address', completed: false },
    { id: 'turnover-funding', label: 'Turnover/Funding Need', completed: false }
  ];
  
  // Business Type form controls
  businessTypeControl = new FormControl('');
  companyNameControl = new FormControl('');
  
  // Merchant Details form controls
  firstNameControl = new FormControl('');
  lastNameControl = new FormControl('');
  emailControl = new FormControl('');
  phoneControl = new FormControl('');
  termsAgreedControl = new FormControl(false);
  
  // Business Address form controls
  addressSearchControl = new FormControl('');
  addressLine1Control = new FormControl('');
  addressLine2Control = new FormControl('');
  townCityControl = new FormControl('');
  stateRegionControl = new FormControl('');
  postCodeControl = new FormControl('');
  
  // Address display state
  hasRegisteredAddress: boolean = false;
  registeredCompanyName: string = 'Groov Technology Ltd.';
  registeredCompanyAddress: string = '07227081 - 90 York Road, Woking, Surrey, England, GU22 7XR';
  
  // Filtered address results
  filteredAddressResults: string[] = [];
  
  // Address search results
  showAddressResults: boolean = false;
  addressResults: string[] = [
    '456 Elm Avenue - Manchester, M1 2AB, United Kingdom',
    '123 Main Street - London, W1U 6RT, United Kingdom',
    '789 Oak Road - Birmingham, B2 3CD, United Kingdom',
    '101 Maple Lane - Glasgow, G1 4EF, United Kingdom',
    '202 Pine Drive - Edinburgh, EH1 5GH, United Kingdom',
    '303 Birch Boulevard - Cardiff, CF10 6HJ, United Kingdom'
  ];
  
  // Turnover/Funding Need form controls
  monthlyTurnoverControl = new FormControl('');
  fundingAmountControl = new FormControl('');
  fundingReasonControl = new FormControl([]);
  hasExistingLoansControl = new FormControl('');
  loanProviderControl = new FormControl('');
  loanAmountControl = new FormControl('');
  
  // Turnover/Funding Need dropdown options
  monthlyTurnoverOptions: string[] = [
    'Less than £100K',
    '£100K - £200K',
    '£200K - £500K',
    '£500K - 1M',
    '£1M - 2M',
    'More than £2M'
  ];
  
  fundingAmountOptions: string[] = [
    'Less than £100K',
    '£100K - £200K',
    '£200K - £500K',
    '£500K - 1M',
    '£1M - 2M',
    'More than £2M'
  ];
  
  fundingReasonOptions: string[] = [
    'Business expansion',
    'Improve cashflow',
    'Vehicle Finance',
    'Property Finance',
    'Machinery & Equipment',
    'Debt refinance',
    'Inventory/Stock Purchase',
    'Equipment/Machinery',
    'Business Interruption',
    'Extension/Renovation',
    'Working capital',
    'Payroll',
    'Business Debt Consolidation',
    'Cash Flow',
    'Quarterly VAT Repayment',
    'Other'
  ];
  
  // Selected funding reasons
  selectedFundingReasons: string[] = [];
  
  // Show funding reason dropdown
  showFundingReasonDropdown: boolean = false;
  
  // Show loan details
  showLoanDetails: boolean = false;
  
  showResults: boolean = false;
  companyResults: CompanyResult[] = [];
  
  businessTypes: BusinessType[] = [
    {
      id: 'sole-trader',
      name: 'Sole Trader',
      description: 'A business structure where you are the sole owner.',
      selected: false
    },
    {
      id: 'partnership',
      name: 'Partnership',
      description: 'Ideal for businesses with two or more owners sharing responsibilities and profits.',
      selected: false
    },
    {
      id: 'ltd',
      name: 'Ltd Company (Ltd)',
      description: 'A private company structure with limited liability for its shareholders.',
      selected: false
    },
    {
      id: 'llp',
      name: 'Limited Liability Partnership (LLP)',
      description: 'A partnership model where members have limited liability protection.',
      selected: false
    },
    {
      id: 'plc',
      name: 'Public Limited Company (PLC)',
      description: 'A corporate structure where shares are publicly traded on the stock market.',
      selected: false
    }
  ];
  
  constructor(private router: Router) {}
  
  ngOnInit() {
    // Initial check for screen size
    this.checkScreenSize();
    // Force detection on load
    setTimeout(() => {
      this.checkScreenSize();
    }, 0);
    
    // Set up address search listener
    this.addressSearchControl.valueChanges.subscribe(value => {
      this.searchAddress(value);
    });
    
    // Set up existing loans listener
    this.hasExistingLoansControl.valueChanges.subscribe(value => {
      this.showLoanDetails = value === 'yes';
    });
  }
  
  // Address search method
  searchAddress(searchTerm: string | null) {
    if (searchTerm && searchTerm.trim().length > 0) {
      this.filteredAddressResults = this.addressResults.filter(address => 
        address.toLowerCase().includes(searchTerm.toLowerCase())
      );
      this.showAddressResults = this.filteredAddressResults.length > 0;
    } else {
      this.showAddressResults = false;
    }
  }
  
  // Turnover/Funding Need methods
  toggleFundingReasonDropdown() {
    this.showFundingReasonDropdown = !this.showFundingReasonDropdown;
  }
  
  selectFundingReason(reason: string) {
    // Add reason if not already selected
    if (!this.selectedFundingReasons.includes(reason)) {
      this.selectedFundingReasons.push(reason);
    }
    this.showFundingReasonDropdown = false;
  }
  
  removeFundingReason(reason: string) {
    // Remove reason from selected list
    this.selectedFundingReasons = this.selectedFundingReasons.filter(r => r !== reason);
  }
  
  setExistingLoans(value: string) {
    this.hasExistingLoansControl.setValue(value);
  }
  
  // This function is defined elsewhere in the file
  
  // Merchant details validation
  validateMerchantDetails(): boolean {
    const firstNameValid = this.firstNameControl.value ? this.firstNameControl.value.trim().length > 0 : false;
    const lastNameValid = this.lastNameControl.value ? this.lastNameControl.value.trim().length > 0 : false;
    const emailValid = this.emailControl.value ? this.emailControl.value.trim().length > 0 : false;
    const phoneValid = this.phoneControl.value ? this.phoneControl.value.trim().length > 0 : false;
    const termsAgreed = this.termsAgreedControl.value;
    
    if (!firstNameValid || !lastNameValid || !emailValid || !phoneValid || !termsAgreed) {
      alert('Please fill in all required fields and agree to the terms.');
      return false;
    }
    
    // Mark merchant-details step as completed
    this.updateProgressSteps('merchant-details', true);
    return true;
  }
  
  @HostListener('window:resize')
  checkScreenSize() {
    // Set isMobileView to true if screen width is less than 768px (bootstrap md breakpoint)
    const wasMobile = this.isMobileView;
    this.isMobileView = window.innerWidth < 768;
    
    // Log only when the state changes
    if (wasMobile !== this.isMobileView) {
      console.log('Mobile state changed:', this.isMobileView);
    }
  }
  
  selectBusinessType(id: string) {
    this.businessTypes.forEach(type => {
      type.selected = type.id === id;
    });
    // Store the selected business type ID
    const selectedType = this.businessTypes.find(type => type.selected);
    if (selectedType) {
      this.businessTypeControl.setValue(selectedType.id);
    }
  }
  
  nextStep() {
    if (this.currentStep === 'business-type') {
      if (this.businessTypeSubStep === 'entity-type') {
        // Check if a business type is selected
        const selectedType = this.businessTypes.find(type => type.selected);
        if (selectedType) {
          if (selectedType.id === 'sole-trader') {
            // For sole trader, skip company name step and go to merchant details
            this.currentStep = 'merchant-details';
          } else {
            // For other business types, go to company name step
            this.businessTypeSubStep = 'company-name';
          }
        }
      } else if (this.businessTypeSubStep === 'company-name') {
        // Move to merchant details step
        this.currentStep = 'merchant-details';
      }
    } else if (this.currentStep === 'merchant-details') {
      // Validate merchant details step
      if (!this.validateMerchantDetails()) {
        return;
      }
      // Move to business address step
      this.currentStep = 'business-address';
    } else if (this.currentStep === 'business-address') {
      // Validate business address step
      if (!this.validateBusinessAddress()) {
        return;
      }
      // Move to turnover/funding step
      this.currentStep = 'turnover-funding';
    } else if (this.currentStep === 'turnover-funding') {
      // Validate turnover/funding step
      if (!this.validateTurnoverFunding()) {
        return;
      }
      // Form completed
      alert('Form completed successfully!');
      // Navigate to landing page
      this.router.navigate(['/']);
    }
  }

  cancel() {
    if (this.currentStep === 'merchant-details') {
      // Go back to business type step
      this.currentStep = 'business-type';
      // If the selected business type is not sole trader, go back to company name step
      const selectedType = this.businessTypes.find(type => type.selected);
      if (selectedType && selectedType.id !== 'sole-trader') {
        this.businessTypeSubStep = 'company-name';
      }
    } else if (this.currentStep === 'business-address') {
      // Go back to merchant details step
      this.currentStep = 'merchant-details';
    } else if (this.businessTypeSubStep === 'company-name') {
      // Go back to entity type selection
      this.businessTypeSubStep = 'entity-type';
    } else {
      // Otherwise navigate to landing page
      this.router.navigate(['/']);
    }
  }
  
  validateBusinessAddress(): boolean {
    // Basic validation for required fields
    const addressLine1Valid = this.addressLine1Control.value ? this.addressLine1Control.value.trim().length > 0 : false;
    const townCityValid = this.townCityControl.value ? this.townCityControl.value.trim().length > 0 : false;
    const postCodeValid = this.postCodeControl.value ? this.postCodeControl.value.trim().length > 0 : false;
    
    if (!addressLine1Valid || !townCityValid || !postCodeValid) {
      alert('Please fill in all required address fields.');
      return false;
    }
    
    // If validation passes, set the registered address flag to true
    this.hasRegisteredAddress = true;
    // Update the registered address details
    this.updateRegisteredAddress();
    
    // Mark business-address step as completed
    this.updateProgressSteps('business-address', true);
    return true;
  }
  
  updateRegisteredAddress() {
    // Update the registered company address from form fields
    const addressLine1 = this.addressLine1Control.value || '';
    const addressLine2 = this.addressLine2Control.value || '';
    const townCity = this.townCityControl.value || '';
    const stateRegion = this.stateRegionControl.value || '';
    const postCode = this.postCodeControl.value || '';
    
    // Format the address string
    let addressParts = [];
    if (addressLine1) addressParts.push(addressLine1);
    if (addressLine2) addressParts.push(addressLine2);
    if (townCity) addressParts.push(townCity);
    if (stateRegion) addressParts.push(stateRegion);
    if (postCode) addressParts.push(postCode);
    
    this.registeredCompanyAddress = addressParts.join(', ');
  }
  
  // This function is defined elsewhere in the file
  
  // Merchant details validation
  validateMerchantDetails(): boolean {
    const firstNameValid = this.firstNameControl.value ? this.firstNameControl.value.trim().length > 0 : false;
    const lastNameValid = this.lastNameControl.value ? this.lastNameControl.value.trim().length > 0 : false;
    const emailValid = this.emailControl.value ? this.emailControl.value.trim().length > 0 : false;
    const phoneValid = this.phoneControl.value ? this.phoneControl.value.trim().length > 0 : false;
    const termsAgreed = this.termsAgreedControl.value;
    
    if (!firstNameValid || !lastNameValid || !emailValid || !phoneValid || !termsAgreed) {
      alert('Please fill in all required fields and agree to the terms.');
      return false;
    }
    
    // Mark merchant-details step as completed
    this.updateProgressSteps('merchant-details', true);
    return true;
  }
  
  editRegisteredAddress() {
    // Toggle to edit mode
    this.hasRegisteredAddress = false;
  }
  
  // Validate Turnover and Funding step
  validateTurnoverFunding(): boolean {
    const monthlyTurnoverValid = this.monthlyTurnoverControl.value ? true : false;
    const fundingAmountValid = this.fundingAmountControl.value ? true : false;
    const fundingReasonsValid = this.selectedFundingReasons.length > 0;
    
    // Check if existing loans is set to yes, then validate loan details
    let loanDetailsValid = true;
    if (this.hasExistingLoansControl.value === 'yes') {
      const loanProviderValid = this.loanProviderControl.value ? this.loanProviderControl.value.trim().length > 0 : false;
      const loanAmountValid = this.loanAmountControl.value ? this.loanAmountControl.value.trim().length > 0 : false;
      loanDetailsValid = loanProviderValid && loanAmountValid;
    }
    
    if (!monthlyTurnoverValid || !fundingAmountValid || !fundingReasonsValid || !loanDetailsValid) {
      alert('Please fill in all required fields for turnover and funding needs.');
      return false;
    }
    
    // Mark turnover-funding step as completed
    this.updateProgressSteps('turnover-funding', true);
    return true;
  }
  
  // Search control for company search
  searchControl = new FormControl('');
  
  searchCompany() {
    const searchTerm = this.searchControl.value?.trim().toLowerCase() || '';
    if (searchTerm.length > 0) {
      this.showResults = true;
      // Filter results based on search term
      this.companyResults = this.generateDummyCompanyResults().filter(company => 
        company.name.toLowerCase().includes(searchTerm));
    } else {
      this.showResults = false;
    }
  }
  
  selectCompany(company: CompanyResult) {
    this.searchControl.setValue(company.name);
    this.showResults = false;
    
    // Set the company name and address for the registered address display
    this.registeredCompanyName = company.name;
    this.registeredCompanyAddress = company.address;
    
    // Parse the company address to set individual form fields
    // This is a simplified example - in a real app, you'd parse the address properly
    const addressParts = company.address.split(',');
    if (addressParts.length >= 3) {
      this.addressLine1Control.setValue(addressParts[0].trim());
      this.addressLine2Control.setValue(addressParts[1].trim());
      this.townCityControl.setValue(addressParts[2].trim());
      if (addressParts.length > 3) {
        this.stateRegionControl.setValue(addressParts[3].trim());
      }
      if (addressParts.length > 4) {
        this.postCodeControl.setValue(addressParts[4].trim());
      }
    }
    
    // Set the registered address flag to true since we have address data
    this.hasRegisteredAddress = true;
  }
  
  clearSearch() {
    this.searchControl.setValue('');
    this.showResults = false;
  }
  

  
  selectAddress(address: string) {
    // Set the search control value to the selected address
    this.addressSearchControl.setValue(address);
    
    // Hide the results
    this.showAddressResults = false;
    
    // Parse the address to set individual form fields
    const parts = address.split(' - ');
    if (parts.length >= 2) {
      // First part is the street address
      this.addressLine1Control.setValue(parts[0]);
      
      // Second part contains city, postal code, and country
      const locationParts = parts[1].split(', ');
      if (locationParts.length >= 3) {
        // City with postal code
        const cityPostalParts = locationParts[0].split(', ');
        this.townCityControl.setValue(cityPostalParts[0]);
        this.postCodeControl.setValue(locationParts[1]);
        this.stateRegionControl.setValue(locationParts[0]);
      }
    }
    
    // Set the registered address flag to true since we have address data
    this.hasRegisteredAddress = true;
    this.updateRegisteredAddress();
  }
  
  isStepCompleted(stepId: string): boolean {
    // Check if the step is completed based on the current step
    if (stepId === 'business-type') {
      return this.currentStep === 'merchant-details' || this.currentStep === 'business-address' || this.currentStep === 'turnover-funding';
    } else if (stepId === 'merchant-details') {
      return this.currentStep === 'business-address' || this.currentStep === 'turnover-funding';
    } else if (stepId === 'business-address') {
      return this.currentStep === 'turnover-funding';
    }
    return false;
  }
  

  
  private generateDummyCompanyResults(): CompanyResult[] {
    this.companyResults = [
      {
        id: '1',
        name: 'Groov Business Consultancy Ltd',
        regNumber: '07272081',
        address: '90 York Road, Working, Surrey, Englan, GU22 7XR'
      },
      {
        id: '2',
        name: 'Groov Technology Ltd.',
        regNumber: '07272081',
        address: '90 York Road, Working, Surrey, Englan, GU22 7XR'
      },
      {
        id: '3',
        name: 'Groov Enterprise Business Consultancy Ltd',
        regNumber: '07272081',
        address: '90 York Road, Working, Surrey, Englan, GU22 7XR'
      },
      {
        id: '4',
        name: 'Groov Enterprise Business Consultancy Ltd',
        regNumber: '07272081',
        address: '90 York Road, Working, Surrey, Englan, GU22 7XR'
      }
    ];
    return this.companyResults;
  }
}
